#!/bin/bash

# spot++ for SBS 

#_______________________________________________________________________________
# variables we'll need
# working directory and experiment name 
currentdir=$PWD
exp=$EXPERIMENT
# file prefixes and names 
# rawDataPath=/adaq1/data1
rawDataPath=/adaq1/work1/adaq
# spot_dir="/chafs1/work1/spot"
# new, temporary (May 19, 2021)
spot_dir=/adaq1/work1/adaq
fileprefix=prexLHRS
CFILE="" 
# run number, event limits 
runnum=0
FIRST=1
LAST=50000
#_______________________________________________________________________________
function print_help(){
    echo "---------------------- Usage --------------------------"
    echo "raster++ "
    echo "->   standard plots from the last coda run"
    echo "raster++ help "
    echo "->   prints this message"
    echo "raster++ #### "
    echo "->   standard plots from run ####"
    echo "raster++ last #1 #2 "
    echo "->   plots from last coda run, using events from #1 to #2"
    echo "raster++ #### #1 #2 "
    echo "->   plots from coda run ####, using events from #1 to #2"
    echo "in all cases a new root file is generated, overwriting "
    echo "the previous one."
    echo "please communicate comments to flay@jlab.org"
    echo "-------------------------------------------------------"
}
#_______________________________________________________________________________
function print_vars(){
   echo "---------------------- Variables ----------------------"
   echo "EXP   = $exp"
   echo "FIRST = ${FIRST}"
   echo "LAST  = ${LAST}"
   echo "CFILE = ${CFILE}"
   echo "PWD   = ${currentdir}"
   echo "-------------------------------------------------------"
}
#_______________________________________________________________________________
function test_file(){
    local fn=$1
    # check if the file exists
    if [ ! -f $fn ]
    then
	echo "ERROR: no CODA files"
	exit
    fi
    # assign to CFILE if exists and is not empty 
    if [ -s $fn ]
    then
        echo "opening $fn"
        CFILE=$fn
    else
        echo "ERROR: $fn does not exist or is empty"
        exit
    fi
}
#_______________________________________________________________________________
function set_event_lim(){
   local a1=$1 
   local a2=$2 
   if [ -z $a1 ]     # argument 1 is null 
   then
      FIRST=1
      LAST=50000
   else
      if [ -z $a2 ]  # argument 2 is null
      then
         FIRST=1
         LAST=$a1
      else           # argument 2 is NOT null 
         FIRST=$a1
         LAST=$a2
      fi
   fi
}
#_______________________________________________________________________________
function yes_or_no(){
  while true; do
    read -p "$* [y/n]: " yn
    case $yn in
      [Yy]*) return 0 ;;
      [Nn]*) echo "No entered" ; return 1 ;;
    esac
  done
}
#_______________________________________________________________________________
function define_paths(){
   # export DB_DIR=../DB
   export DB_DIR=/adaqfs/home/a-onl/rastersize/DB
   echo "DB_DIR = $DB_DIR"
   ANALYZER_PATH=$HOME/dflay/ANALYZER/install
   # udpate LD_LIBRARY_PATH 
   export LD_LIBRARY_PATH=/adaqfs/coda/2.2/Linux/lib 
   export LD_LIBRARY_PATH=/adaqfs/home/a-onl/evio-4.3/Linux-x86_64/lib:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH=/adaqfs/home/a-onl/happexsp/TreeSearch:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH=/adaqfs/apps/ROOT/pro/lib64:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH=$ANALYZER_PATH/lib64:$LD_LIBRARY_PATH
   # update path 
   export PATH=/adaqfs/home/a-onl/bin
   export PATH=/usr/local/bin:$PATH
   export PATH=/adaqfs/apps/bin:$PATH
   export PATH=/usr/bin:$PATH
   export PATH=/usr/local/sbin:$PATH
   export PATH=/usr/sbin:$PATH
   export PATH=/adaqfs/home/a-onl/bin/Linux:$PATH
   export PATH=/bin:$PATH
   export PATH=/usr/X11R6/bin:$PATH
   export PATH=/apps/bin:$PATH
   export PATH=/site/bin:$PATH
   export PATH=.:$PATH
   export PATH=/adaqfs/apps/contrib/bin:$PATH
   export PATH=/adaqfs/apps/ROOT/pro/bin:$PATH
   export PATH=$ANALYZER_PATH/bin:$PATH
   # location of rastersize_L.C script 
   RASTER_PATH=$HOME/halla_online_beam_check/raster
   # check paths
   # echo "PATH = $PATH" 
   # echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
}
#_______________________________________________________________________________
# main 

# parse command line input 
case $1 in 
   "" | "last")
      runnum=`cat ~adaq/datafile/rcRunNumberL`
      fn=${rawDataPath}/${fileprefix}_${runnum}.dat.0
      test_file $fn
      set_event_lim $2 $3    
      ;;
   "help" | "HELP" )
      print_help
      exit;;
   * )
      # anything else, check set up input 
      runnum=$1
      fn=${rawDataPath}/${fileprefix}_${1}.dat.0
      test_file $fn
      set_event_lim $2 $3
      ;;   
esac

# define/update paths to run spot++
define_paths

# move to the raster directory
cd $RASTER_PATH

# print_vars
# exit 

#rm -f rastersize.root

# run spot++ 
$ANALYZER_PATH/bin/analyzer -b -q 'get_rastersize_L.C("'$CFILE'","'$runnum'",'$FIRST','$LAST',"rastersize.root")'

RootFILE=L${runnum}".root"
echo "spot_dir = ${spot_dir}"
echo "pwd = $PWD"
ls -la rastersize.root
ls -la  FADC_${exp}_$runnum.pdf 

mv rastersize.root ${spot_dir}/$RootFILE
mv FADC_${exp}_$runnum.pdf ${spot_dir}/.

echo =================
echo DONE. PDFs and ROOTFILE are stored at ${spot_dir}
echo =================
echo "RUN : ${runnum}"
cd $currentdir

# evince ${spot_dir}/FADC_${exp}_$runnum.pdf &

yes_or_no "Upload these plots to logbook HALOG? " && \
/site/ace/certified/apps/bin/logentry \
    --logbook "HALOG" \
    --tag Autolog \
    --title "Spot check using Left HRS run ${runnum}" \
    --attach ${spot_dir}/FADC_${exp}_${runnum}.pdf

